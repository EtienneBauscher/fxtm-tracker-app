// Mocks generated by Mockito 5.4.5 from annotations
// in fxtm/test/blocs/instrument_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fxtm/contracts/finnhub_service.contract.dart' as _i3;
import 'package:fxtm/contracts/logger_service.contract.dart' as _i6;
import 'package:fxtm/models/price_update.model.dart' as _i5;
import 'package:fxtm/models/result.model.dart' as _i2;
import 'package:logger/web.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FinnhubServiceContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockFinnhubServiceContract extends _i1.Mock
    implements _i3.FinnhubServiceContract {
  MockFinnhubServiceContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, List<List<String>>> get groups => (super.noSuchMethod(
        Invocation.getter(#groups),
        returnValue: <String, List<List<String>>>{},
      ) as Map<String, List<List<String>>>);

  @override
  _i4.Stream<_i5.PriceUpdate> get priceStream => (super.noSuchMethod(
        Invocation.getter(#priceStream),
        returnValue: _i4.Stream<_i5.PriceUpdate>.empty(),
      ) as _i4.Stream<_i5.PriceUpdate>);

  @override
  _i4.Future<_i2.Result<Map<String, List<List<String>>>>> fetchSymbols() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSymbols,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Result<Map<String, List<List<String>>>>>.value(
                _FakeResult_0<Map<String, List<List<String>>>>(
          this,
          Invocation.method(
            #fetchSymbols,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<Map<String, List<List<String>>>>>);

  @override
  _i4.Future<bool> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void subscribe(List<String>? symbols) => super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [symbols],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listen() => super.noSuchMethod(
        Invocation.method(
          #listen,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoggerServiceContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerServiceContract extends _i1.Mock
    implements _i6.LoggerServiceContract {
  MockLoggerServiceContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void log(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
    _i7.Level? level,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
            #level: level,
          },
        ),
        returnValueForMissingStub: null,
      );
}
